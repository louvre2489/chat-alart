rules = [
  DisableSyntax
  ProcedureSyntax
  RemoveUnused
  LeakingImplicitClassVal
  NoValInForComprehension
]

RemoveUnused.imports = true
RemoveUnused.privates = true
RemoveUnused.locals = true

DisableSyntax.noVars = true
DisableSyntax.noThrows = true
DisableSyntax.noNulls = true
DisableSyntax.noReturns = true
DisableSyntax.noWhileLoops = true
DisableSyntax.noAsInstanceOf = true
DisableSyntax.noIsInstanceOf = true
DisableSyntax.noXml = true
DisableSyntax.noDefaultArgs = true
DisableSyntax.noFinalVal = true
DisableSyntax.noFinalize = true
DisableSyntax.noValPatterns = true
DisableSyntax.noUniversalEquality = true
DisableSyntax.noUniversalEqualityMessage = "== and != are unsafe since they allow comparing two unrelated types"
DisableSyntax.regex = []

ExplicitResultTypes.memberKind = [
  Def,
  Val,
  Var
]
ExplicitResultTypes.memberVisibility = [
  Public,
  Protected
]
ExplicitResultTypes.skipSimpleDefinitions = ['Term.Ref', 'Lit', 'Term.New']
ExplicitResultTypes.skipLocalImplicits = true
ExplicitResultTypes.fatalWarnings = false
ExplicitResultTypes.rewriteStructuralTypesToNamedSubclass = true
